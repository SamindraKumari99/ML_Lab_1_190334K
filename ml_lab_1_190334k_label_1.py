# -*- coding: utf-8 -*-
"""ML Lab 1 - 190334K - Label 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r0-59gfsiuntLOnIy0AJDLMkuzl7-TAl

Define label names and feature names
"""

import pandas as pd
import numpy as np

LBL = "label_1" # Speaker ID
LABELS = ['label_1','label_2', 'label_3', 'label_4']
FEATURES = [f'feature_{i}' for i in range(1, 257)]

"""Read training,validation and test data"""

from google.colab import drive
drive.mount('/content/drive')


train_df = pd.read_csv("/content/drive/MyDrive/ML_lab1/train.csv")
valid_df = pd.read_csv("/content/drive/MyDrive/ML_lab1/valid.csv")
test_df = pd.read_csv("/content/drive/MyDrive/ML_lab1/test.csv")

"""Initialize dictionaries to store data"""

train_x = {}
valid_x = {}
test_x = {}
train_y = {}
valid_y = {}
test_y = {}

"""Prepare and preprocess the data

"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
train_x[LBL] = pd.DataFrame(scaler.fit_transform(train_df.drop(LABELS, axis=1)), columns = FEATURES)
train_y[LBL] = train_df[LBL]
valid_x[LBL] = pd.DataFrame(scaler.transform(valid_df.drop(LABELS, axis=1)), columns = FEATURES)
valid_y[LBL] = valid_df[LBL]
test_x[LBL] = pd.DataFrame(scaler.transform(test_df.drop(LABELS, axis=1)), columns=FEATURES)

"""# For Label 1

Train SVC classifier
"""

from sklearn import svm

classifier = svm.SVC(kernel = 'linear')
classifier.fit(train_x[LBL], train_y[LBL])

"""Evaluate performance of SVC classifier on the validation dataset"""

from sklearn import metrics

y_predict_valid = classifier.predict(valid_x[LBL])

print("SVC Classifier Evaluation on Validation Set:")
print("Accuracy:", metrics.accuracy_score(valid_y[LBL], y_predict_valid))
print("Precision:", metrics.precision_score(valid_y[LBL], y_predict_valid, average='weighted'))
print("Recall:", metrics.recall_score(valid_y[LBL], y_predict_valid, average='weighted'))

"""Predict lable 1 for test dataset  using SVM classifier"""

y_predict_test_before = classifier.predict(test_x[LBL])

"""## Applying Feature Engineering techniques

### Using SelectKBest and PCA

Apply SelectKBest on original features
"""

from sklearn.feature_selection import SelectKBest, f_classif

selector = SelectKBest(f_classif, k=190)
x_selected = selector.fit_transform(train_x[LBL], train_y[LBL])

"""Apply PCA on the SelectKBest-selected features"""

from sklearn.decomposition import PCA

pca = PCA(n_components=0.95, svd_solver='full')
pca.fit(x_selected)

train_x_trans = pd.DataFrame(pca.transform(x_selected))
valid_x_trans = pd.DataFrame(pca.transform(selector.transform(valid_x[LBL])))
test_x_trans = pd.DataFrame(pca.transform(selector.transform(test_x[LBL])))

print("Shape after feature reduction:", train_x_trans.shape)

"""Train the SVC classifier on PCA-transformed SelectKBest-selected features

"""

classifier = svm.SVC(kernel='linear')
classifier.fit(train_x_trans, train_y[LBL])

"""Evaluate performance of SVC classifier on PCA-transformed SelectKBest-selected features using validation dataset"""

y_predict_valid_pca = classifier.predict(valid_x_trans)

print("SVM Classifier Evaluation on PCA-transformed SelectKBest-selected features (Validation Set):")
print("Accuracy:", metrics.accuracy_score(valid_y[LBL], y_predict_valid_pca))
print("Precision:", metrics.precision_score(valid_y[LBL], y_predict_valid_pca, average='weighted'))
print("Recall:", metrics.recall_score(valid_y[LBL], y_predict_valid_pca, average='weighted'))

"""Predict lable 1 for test dataset after feature reduction"""

y_predict_test_after = classifier.predict(valid_x_trans)

output_df = pd.DataFrame({
    'Predicted labels before feature engineering': y_predict_test_before,
    'Predicted labels after feature engineering': y_predict_test_after,
    'No of new features': test_x_trans.shape[1]
})


for i in range(test_x_trans.shape[1]):
    output_df[f'new_feature_{i+1}'] = test_x_trans.iloc[:, i]
# Create a list of new column names
new_columns = [f'new_feature_{i+1}' for i in range(test_x_trans.shape[1], 256)]

# Concatenate the new columns to the existing DataFrame
output_df = pd.concat([output_df, pd.DataFrame(columns=new_columns)], axis=1)

output_df.to_csv('/content/drive/MyDrive/Colab Notebooks/files/190334K_label_1.csv', index=False)